
    <style type="text/css">
      #login, #loggedin {
        display: none;
      }
      .text-overflow {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        width: 500px;
      }
    </style>


    <div class="container">

        <h1>Spotify Player</h1>

      <div id="loggedin">
        <div id="user-profile">
        </div>
        <div id="oauth">
        </div>

        <button class="btn btn-default" id="obtain-new-token">Obtain new token using the refresh token</button>
      </div>
    </div>
        <div id="track-list">
        </div>
        
    <script id="user-profile-template" type="text/x-handlebars-template">
      <h1>Logged in as {{display_name}}</h1>
      <div class="media">
        <div class="pull-left">
          <img class="media-object" width="150" src="{{images.0.url}}" />
        </div>
        <div class="media-body">
          <dl class="dl-horizontal">
            <dt>Display name</dt><dd class="clearfix">{{display_name}}</dd>
            <dt>Id</dt><dd>{{id}}</dd>
            <dt>Email</dt><dd>{{email}}</dd>
            <dt>Spotify URI</dt><dd><a href="{{external_urls.spotify}}">{{external_urls.spotify}}</a></dd>
            <dt>Link</dt><dd><a href="{{href}}">{{href}}</a></dd>
            <dt>Profile Image</dt><dd class="clearfix"><a href="{{images.0.url}}">{{images.0.url}}</a></dd>
            <dt>Country</dt><dd>{{country}}</dd>
          </dl>
        </div>
      </div>
    </script>

    <script id="oauth-template" type="text/x-handlebars-template">
      <h2>oAuth info</h2>
      <dl class="dl-horizontal">
        <dt>Access token</dt><dd class="text-overflow">{{access_token}}</dd>
        <dt>Refresh token</dt><dd class="text-overflow">{{refresh_token}}</dd>
      </dl>
    </script>


      <script id="playing-now-template" type="text/x-handlebars-template">
      <h2></h2>
      <dl class="dl-horizontal">
        <dt>Access token</dt><dd class="text-overflow">{{access_token}}</dd>
        <dt>Refresh token</dt><dd class="text-overflow">{{refresh_token}}</dd>
      </dl>

       <button data-control="pause">
      Pause
    </button>
    <button data-control="play">
      Play
    </button>
    </script>


   

    <script id="track-list-template" type="text/x-handlebars-template">
      <h3>Title</h3>
      <ul>
        \{{#each tracks }}
          <li data-track_uri=\{{this.uri}}>
            <div class="track-name">\{{this.name}}</div>
            <div class="track-artist">
              \{{#each artists}}
                  \{{this.name}}
              \{{/each}}
            </div>
            </li>
        \{{/each}}
      </ul>
    </script>

    <script src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.1/handlebars.min.js"></script>
    <script src="https://sdk.scdn.co/spotify-player.js"></script>
    <script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
    <script>





      (function() {

        /**
         * Obtains parameters from the hash of the URL
         * @return Object
         */
        function getHashParams() {
          var hashParams = {};
          var e, r = /([^&;=]+)=?([^&;]*)/g,
              q = window.location.hash.substring(1);
          while ( e = r.exec(q)) {
             hashParams[e[1]] = decodeURIComponent(e[2]);
          }
          return hashParams;
        }

        var userProfileSource = document.getElementById('user-profile-template').innerHTML,
            userProfileTemplate = Handlebars.compile(userProfileSource),
            userProfilePlaceholder = document.getElementById('user-profile');

        var oauthSource = document.getElementById('oauth-template').innerHTML,
            oauthTemplate = Handlebars.compile(oauthSource),
            oauthPlaceholder = document.getElementById('oauth');
        var trackListSource = document.getElementById('track-list-template').innerHTML,
            trackListTemplate = Handlebars.compile(trackListSource),
            trackListPlaceholder = document.getElementById('track-list');


            console.log(trackListSource, trackListTemplate, trackListPlaceholder)

        

        var params = getHashParams();



        var access_token = params.access_token,
            refresh_token = params.refresh_token,
            error = params.error;

        console.log(access_token)

        let tracks;

        if (error) {
          alert('There was an error during the authentication');
        } else {
          if (access_token) {
            // render oauth info
            oauthPlaceholder.innerHTML = oauthTemplate({
              access_token: access_token,
              refresh_token: refresh_token
            });

            $.ajax({
                url: 'https://api.spotify.com/v1/me',
                headers: {
                  'Authorization': 'Bearer ' + access_token
                },
                success: function(response) {

                  console.log(response)
                  userProfilePlaceholder.innerHTML = userProfileTemplate(response);

                  $('#login').hide();
                  $('#loggedin').show();

                  fetch('https://api.spotify.com/v1/me/tracks?limit=50', {headers: {
                  'Authorization': 'Bearer ' + access_token
                  }})
                    .then(data => data.json())
                    .then(data =>  { 


                      console.table(data.items.map(song => song.track))

                      const tracks = data.items.map(song => song.track)
                      trackListPlaceholder.innerHTML = trackListTemplate({ tracks:tracks })




                      return data
                    })

                  fetch('https://api.spotify.com/v1/search?q=battery&type=track&limit=50', {headers: {
                  'Authorization': 'Bearer ' + access_token
                  }})
                   .then(data => data.json())
                    .then(data =>  {
                     
                      console.log(data.tracks.items[0].artists)
                       console.log(data.tracks.items.filter(song => song.artists[0]['name'] == "Metallica"))
                     })
                }
            });
          } else {
              // render initial screen
              $('#login').show();
              $('#loggedin').hide();
          }

          document.getElementById('obtain-new-token').addEventListener('click', function() {
            $.ajax({
              url: '/refresh_token',
              data: {
                'refresh_token': refresh_token
              }
            }).done(function(data) {
              access_token = data.access_token;
              oauthPlaceholder.innerHTML = oauthTemplate({
                access_token: access_token,
                refresh_token: refresh_token
              });
            });
          }, false);
        }
      })();
      




const token =  window.location.hash.substr(1).split('=')[1]

      window.onSpotifyWebPlaybackSDKReady = () => {
  // const token = urlParams.get('code');

console.log('token' , token)


  const player = new Spotify.Player({
    name: 'Web Playback SDK Template',
    getOAuthToken: cb => { cb(token); },
    volume: 0.9
  });

  // Error handling
  player.on('initialization_error', e => console.error(e));
  player.on('authentication_error', e => console.error(e));
  player.on('account_error', e => console.error(e));
  player.on('playback_error', e => console.error(e));

  // Playback status updates
  player.on('player_state_changed', state => {
    console.log(state)
   
    const { artists, name } = state.track_window.current_track

    console.table([artists, name])
  });

  // Ready
  player.on('ready', data => {
    console.log('Ready with Device ID', data.device_id);
    console.log(token)
    // Play a track using our new device ID
    //play(data.device_id, token);

    
                      document.querySelector('#track-list').addEventListener('click', function(event) {

                        const target = event.target;
                        console.log(target)
                        console.log('nu')

                        // Check wether the event bubbling path contains the list item element
                        const LI = event.path.find(el => el.tagName == 'LI')

                        if(typeof LI != 'undefined'){
                          console.log('Element:', event.path.find(el => el.tagName == 'LI'))
                          const trackUri = LI.getAttribute('data-track_uri')
                          play(data.device_id, token, trackUri );
                        }else{
                          console.log('nope')
                        }

                     /*   if(target.tagName == 'LI'){
                          console.log(target.getAttribute('data-track_uri'))
                          const trackUri = target.getAttribute('data-track_uri')
                          play(data.device_id, token, trackUri );
                        }*/
                      }, false)
  });

  // Connect to the player!
  player.connect();


  const pauseBtn = document.querySelector('button[data-control="pause"]')
  const playBtn = document.querySelector('button[data-control="play"]')


  const controls = [pauseBtn, playBtn];

  controls.forEach(control => {
    control.addEventListener('click', e => {
      if(e.target.dataset.control === 'pause'){
        player.pause().then(() => {
          console.log('Paused!');
        });
      }else if(e.target.dataset.control === 'play'){
        player.resume().then(() => {
          console.log('Paused!');
        });
      }
    })
  })


}




// Play a specified track on the Web Playback SDK's device ID
function play(device_id, token, trackUri) {
    console.log(token)
 fetch(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {
        method: "PUT",
        headers: {
            "Accept": "application/json",
            "Content-Type": "application/json",
            Authorization: "Bearer " + token,
        },
        body: JSON.stringify({
            uris: [trackUri]
        })})
        
}







    </script>


